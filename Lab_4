import 'dart:async';

// ------------------ –ö–ª–∞—Å Hour ------------------
class Hour {
  int _passengers;
  String _comment;

  Hour(this._passengers, this._comment);

  int get passengers => _passengers;
  String get comment => _comment;

  set passengers(int value) {
    if (value >= 0) _passengers = value;
  }

  set comment(String value) => _comment = value;

  @override
  String toString() {
    return "Hour(passengers: $_passengers, comment: '$_comment')";
  }
}

// ------------------ Generic –∫–ª–∞—Å ------------------
class DataContainer<T> {
  List<T> _items = [];

  void add(T item) => _items.add(item);
  List<T> get items => _items;

  // Generic –º–µ—Ç–æ–¥ 1: –ø–æ—à—É–∫ –∑–∞ —É–º–æ–≤–æ—é
  T? find(bool Function(T) condition) {
    for (var item in _items) {
      if (condition(item)) return item;
    }
    return null;
  }

  // Generic –º–µ—Ç–æ–¥ 2: –∞–≥—Ä–µ–≥—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫)
  R aggregate<R>(R initialValue, R Function(R, T) combine) {
    R result = initialValue;
    for (var item in _items) {
      result = combine(result, item);
    }
    return result;
  }

  // Generic –º–µ—Ç–æ–¥ 3: –ø–æ—à—É–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—î–º
  T? maxBy(num Function(T) selector) {
    if (_items.isEmpty) return null;
    T maxItem = _items.first;
    num maxValue = selector(maxItem);
    for (var item in _items) {
      var value = selector(item);
      if (value > maxValue) {
        maxValue = value;
        maxItem = item;
      }
    }
    return maxItem;
  }
}

// ------------------ –ö–ª–∞—Å MetroStation ------------------
class MetroStation {
  String _name;
  int _yearOpened;
  DataContainer<Hour> _hours = DataContainer<Hour>();

  MetroStation(this._name, this._yearOpened);

  String get name => _name;
  int get yearOpened => _yearOpened;

  set name(String value) => _name = value;
  set yearOpened(int value) => _yearOpened = value;

  void addHour(Hour hour) => _hours.add(hour);

  // --- –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è generic-–º–µ—Ç–æ–¥—ñ–≤ ---
  int totalPassengers() =>
      _hours.aggregate<int>(0, (sum, h) => sum + h.passengers);

  Hour? minPassengersHour() {
    if (_hours.items.isEmpty) return null;
    return _hours.items.reduce((a, b) => a.passengers < b.passengers ? a : b);
  }

  Hour? maxWordsInCommentHour() =>
      _hours.maxBy((h) => h.comment.split(" ").length);

  @override
  String toString() => "MetroStation(name: $_name, yearOpened: $_yearOpened)";

  // ------------------ ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ------------------

  // 1Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä 1-–≥–æ –≤–∏–¥—É (Future(() {...}))
  Future<MetroStation> getFutureWithConstructor1() {
    return Future(() {
      print("üîπ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è Future –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º 1-–≥–æ –≤–∏–¥—É...");
      return this;
    });
  }

  // 2Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä 2-–≥–æ –≤–∏–¥—É (Future.value / Future.error)
  Future<MetroStation> getFutureWithConstructor2({bool withError = false}) {
    if (withError) {
      return Future<MetroStation>.error(
        "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—Ü—ñ—ó",
      );
    } else {
      return Future<MetroStation>.value(this);
    }
  }
}

// ------------------ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ ------------------
Future<void> processStationData(MetroStation station) async {
  try {
    print("\n=== –ü–æ—á–∞—Ç–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ ===");

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π Future
    var result1 = await station.getFutureWithConstructor1();
    print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω—Ü—ñ—é (1-–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä): ${result1.name}");

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥—Ä—É–≥–∏–π Future (—É—Å–ø—ñ—Ö)
    var result2 = await station.getFutureWithConstructor2();
    print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞–Ω—Ü—ñ—é (2-–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä): ${result2.yearOpened}");

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –¥—Ä—É–≥–∏–π Future –∑ –ø–æ–º–∏–ª–∫–æ—é
    await station.getFutureWithConstructor2(withError: true);
  } catch (e) {
    print("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: $e");
  } finally {
    print("=== –ö—ñ–Ω–µ—Ü—å –æ–±—Ä–æ–±–∫–∏ ===\n");
  }
}

// ------------------ main ------------------
void main() async {
  MetroStation station = MetroStation("–•—Ä–µ—â–∞—Ç–∏–∫", 1960);

  station.addHour(Hour(120, "–†–∞–Ω–∫–æ–≤–∏–π —á–∞—Å –ø—ñ–∫"));
  station.addHour(Hour(45, "–ú–∞–ª–æ –ª—é–¥–µ–π"));
  station.addHour(Hour(200, "–î—É–∂–µ –±–∞–≥–∞—Ç–æ –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ —É –≤–∞–≥–æ–Ω—ñ –º–µ—Ç—Ä–æ"));

  print(station);
  print("–°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤: ${station.totalPassengers()}");
  print(
    "–ì–æ–¥–∏–Ω–∞ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–∞—Å–∞–∂–∏—Ä—ñ–≤: ${station.minPassengersHour()}",
  );
  print(
    "–ì–æ–¥–∏–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ª—ñ–≤ —É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ: ${station.maxWordsInCommentHour()}",
  );

  // --- –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é ---
  await processStationData(station);
}
